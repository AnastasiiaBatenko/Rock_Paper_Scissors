# game.py
from tic_tac_toe import TicTacToe

class Game:
    """Клас для управління грою."""

    def __init__(self):
        """Ініціалізація гри."""
        self.tic_tac_toe = TicTacToe()
        self.players = {}  # Словник для зберігання імен гравців
        self.game_mode = ""  # Режим гри (PvP або PvC)
        self.player_symbol = ""  # Символ гравця (X або O)

    def set_game_mode(self):
        """Вибір режиму гри."""
        print("Choose game mode:\n1. Play with another player\n2. Play with computer")
        while True:
            choice = input("Enter 1 or 2: ")
            if choice == '1':
                self.players = {"X": "Player 1", "O": "Player 2"}
                self.game_mode = "PvP"
                break
            elif choice == '2':
                self.players = {"X": "Player 1", "O": "Computer"}
                self.game_mode = "PvC"
                break
            else:
                print("Invalid choice. Try again.")

    def choose_symbol(self):
        """Вибір символу гравця."""
        print("Choose your symbol:")
        while True:
            choice = input("Do you want to play as X or O? ").upper()
            if choice in ["X", "O"]:
                self.player_symbol = choice
                if self.game_mode == "PvC":
                    self.players = {choice: "Player 1", "X" if choice == "O" else "O": "Computer"}
                else:
                    self.players = {choice: "Player 1", "X" if choice == "O" else "O": "Player 2"}
                break
            else:
                print("Invalid choice. Please choose X or O.")

    def play_turn(self, current_player):
        """Обробка ходу гравця."""
        self.tic_tac_toe.display_board()
        if self.players[current_player] == "Computer":
            self.tic_tac_toe.make_computer_move(current_player)
        else:
            while True:
                try:
                    row = int(input(f"{self.players[current_player]}, choose your row (1-3): "))
                    col = int(input(f"{self.players[current_player]}, choose your column (1-3): "))
                    if row < 1 or row > 3 or col < 1 or col > 3 or not self.tic_tac_toe.make_move(row, col, current_player):
                        print("Invalid move. Try again.")
                    else:
                        break
                except ValueError:
                    print("Please enter numbers between 1 and 3.")

    def play_game(self):
        """Управління ходом гри."""
        current_player = "X" if self.player_symbol == "X" else "O"
        if self.game_mode == "PvC" and self.player_symbol == "O":
            self.tic_tac_toe.make_computer_move("X")
            current_player = "O"

        while True:
            self.play_turn(current_player)
            winner = self.tic_tac_toe.check_winner()
            if winner:
                self.tic_tac_toe.display_board()
                if winner == 'Tie':
                    print("It's a tie!")
                else:
                    print(f"{self.players[winner]} wins!")
                    self.tic_tac_toe.scores[self.players[winner]] += 1
                break
            current_player = "O" if current_player == "X" else "X"

    def display_scores(self):
        """Виведення рахунку гравців."""
        print("\nFinal Scores:")
        for player, score in self.tic_tac_toe.scores.items():
            print(f"{player}: {score}")
        winner = max(self.tic_tac_toe.scores, key=self.tic_tac_toe.scores.get)
        print(f"Overall winner: {winner}!")

    def start(self):
        """Запуск гри."""
        self.set_game_mode()
        self.choose_symbol()

        while True:
            self.tic_tac_toe.reset_board()
            self.play_game()
            again = input("Do you want to play again? (yes/no): ").lower()
            if again != 'yes':
                break

        self.display_scores()

if __name__ == "__main__":
    Game().start()
